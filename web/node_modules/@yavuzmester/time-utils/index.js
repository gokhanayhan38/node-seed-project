"use strict";

const isNonEmptyString = s => typeof s === "string" && s.length > 0;

const timeUtils = {
    durationToMin: function(duration /*: string */) /*: number */ {
        let matchResult, day = 0, hour = 0, min = 0, sec = 0;

        matchResult = duration.match(/([0-9]+([\/.][0-9]+)?)m/);
        if (matchResult) {
            min = +matchResult[1];
        }

        matchResult = duration.match(/([0-9]+([\/.][0-9]+)?)s/);
        if (matchResult) {
            sec = +matchResult[1];
        }

        matchResult = duration.match(/([0-9]+([\/.][0-9]+)?)h/);
        if (matchResult) {
            hour = +matchResult[1];
        }

        matchResult = duration.match(/([0-9]+([\/.][0-9]+)?)d/);
        if (matchResult) {
            day = +matchResult[1];
        }

        return day * 24 * 60 + hour * 60 + min + sec / 60;
    },

    timeBinNoToIsoDate: function(binNo /*: number */, offsetIsoDate /*: string */, binToMin /*: number */) /*: ?string */ {
        if (Number.isFinite(binNo) && isNonEmptyString(offsetIsoDate) && Number.isFinite(binToMin)) {
            const offsetDateMs = new Date(offsetIsoDate).getTime(),
                date = new Date(offsetDateMs + binNo * binToMin * 60 * 1000),
                isoDate = date.toISOString();

            return isoDate;
        }
    },

    isoDateToTimeBinNo: function(isoDate /*: string */, offsetIsoDate /*: string */, binToMin /*: number */) /*: ?number */ {
        if (isNonEmptyString(isoDate) && isNonEmptyString(offsetIsoDate) && Number.isFinite(binToMin)) {
            const dateMs = new Date(isoDate).getTime(),
                offsetDateMs = new Date(offsetIsoDate).getTime();

            const difInMs = dateMs - offsetDateMs,
                difInMinutes = difInMs / (60 * 1000),
                binNo = Math.floor(difInMinutes / binToMin);

            return binNo;
        }
    },

    prettifyTimeBucketSize: function(bucketToBin /*: number */, binToMin /*: number */) /*: string */ {
        if (Number.isFinite(bucketToBin) && Number.isFinite(binToMin)) {
            const binToHour = binToMin / 60,
                bucketToHour = bucketToBin * binToHour;

            if (bucketToHour < 1 / 60.0) {
                return Number((bucketToHour * 3600).toFixed(1)) + "s";
            } else if (bucketToHour < 1) {
                return Number((bucketToHour * 60).toFixed(1)) + "m";
            } else if (bucketToHour < 24) {
                return Number(bucketToHour.toFixed(1)) + "h";
            } else { /* if (bucketToHour >= 24) */
                return Number((bucketToHour / 24.0).toFixed(1)) + "d";
            }
        }
        else {
            return "";
        }
    }
};

module.exports = timeUtils;
