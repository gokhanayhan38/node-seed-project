"use strict";

class CacheHolder {
    constructor(maxCacheSize) {
        this._maxCacheSize = (!!maxCacheSize && Number.isFinite(maxCacheSize)) ? maxCacheSize : null;
        this._contents = {};
    }

    setToCache(key, value) {
        this._contents[key] = value;
        this._limitCache();
    }

    _limitCache() {
        if (!!this._maxCacheSize) {
            let maxCacheSize = this._maxCacheSize,
                keys = Object.keys(this._contents);

            if (keys.length > maxCacheSize){
                let rand = keys[Math.floor(Math.random() * keys.length)],
                    randomlySelectedKey = keys[rand];

                this._contents[randomlySelectedKey] = null;
                delete this._contents[randomlySelectedKey];
            }
        }
    }

    getFromCache(key) {
        return this._contents[key];
    }

    removeFromCache(key) {
        this._contents[key] = null;
        delete this._contents[key];
    }

    isEmpty() {
        return Object.keys(this._contents).length === 0;
    }
}

module.exports = CacheHolder;
